<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/batch
                    http://www.springframework.org/schema/batch/spring-batch.xsd
					http://www.springframework.org/schema/jdbc
					http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
					http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- Launch batch job thread pool -->
	<bean id="batchJobExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
		destroy-method="destroy">
		<property name="corePoolSize" value="5" />
		<property name="maxPoolSize" value="10" />
		<property name="queueCapacity" value="30" />
	</bean>

	<batch:job-repository id="jobRepository"
		data-source="dataSource" transaction-manager="transactionManager"
		table-prefix="${batch.table.prefix}" />

	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
		<property name="taskExecutor" ref="batchJobExecutor" />
	</bean>

	<bean id="batchJobOperator"
		class="org.springframework.batch.core.launch.support.SimpleJobOperator">
		<property name="jobExplorer" ref="jobExplorer" />
		<property name="jobLauncher" ref="jobLauncher" />
		<property name="jobRepository" ref="jobRepository" />
		<property name="jobRegistry" ref="jobRegistry" />
	</bean>

	<bean id="jobExplorer"
		class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="tablePrefix" value="${batch.table.prefix}" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Initialise the database if enabled: -->
	<jdbc:initialize-database data-source="dataSource"
		enabled="${batch.data.source.init}" ignore-failures="DROPS">
		<jdbc:script location="${batch.drop.script}" />
		<jdbc:script location="${batch.schema.script}" />
	</jdbc:initialize-database>

	<bean id="jobParametersConverter"
		class="org.springframework.batch.core.jsr.JsrJobParametersConverter">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean id="jobRegistry"
		class="org.springframework.batch.core.configuration.support.MapJobRegistry" />

	<bean id="jobRegistryBeanPostProcessor"
		class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
		<property name="jobRegistry" ref="jobRegistry" />
	</bean>

	<bean id="placeholderProperties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:batch-mysql.properties</value>
			</list>
		</property>
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="ignoreUnresolvablePlaceholders" value="false" />
		<property name="order" value="1" />
	</bean>
	<!-- ################################################### -->
    <!--               Global Job Configuration              -->
    <!-- ################################################### -->

	<batch:job id="abstractJob" restartable="true"
		job-repository="jobRepository" abstract="true">
	</batch:job>

    <batch:step id="abstractStep" abstract="true" job-repository="jobRepository">
        <batch:tasklet transaction-manager="transactionManager" allow-start-if-complete="true" throttle-limit="5">
            <batch:chunk commit-interval="10"
                         skip-limit="10"  >
                <batch:skippable-exception-classes>
                    <batch:include class="java.lang.Exception"/>
                </batch:skippable-exception-classes>
            </batch:chunk>
            <batch:listeners>
                <batch:listener ref="stepListener"/>
            </batch:listeners>
        </batch:tasklet>
    </batch:step>

	<bean id="stepListener" class="com.deppon.demo.batch.listener.StepListener"></bean>
	<!-- ################################################### -->
	<!-- Job Component Configuration -->
	<!-- ################################################### -->

	<bean id="testReader" class="com.deppon.demo.batch.ItemReader.ItemfromJdbc"
		scope="step">
		<property name="clazz" value="com.deppon.demo.base.entity.TestEntity" />
	</bean>
	<bean id="testProcessor"
		class="com.deppon.demo.batch.ItemProcessor.AdepterItemProcessor"></bean>
	<bean id="testWriter" class="com.deppon.demo.batch.ItemWriter.MyItemWriter"></bean>
	<bean id="itemToRedisWriter" class="com.deppon.demo.batch.ItemWriter.ItemToRedisWriter"></bean>

	<batch:job id="testEntityBatchJob" parent="abstractJob">
		<batch:step id="testEntityBatchStep" parent="abstractStep">
			<batch:tasklet>
				<batch:chunk processor="testProcessor" writer="itemToRedisWriter">
					<batch:reader>
						<bean class="org.mybatis.spring.batch.MyBatisPagingItemReader"
							scope="step">
							<property name="pageSize" value="10" />
							<property name="sqlSessionFactory" ref="sqlSessionFactory" />
							<property name="queryId"
								value="com.deppon.demo.mybatis.dao.TestDaoImpl.pushCache" />
							<property name="parameterValues">
								<map>
									<entry key="_ids" value="#{jobParameters['_ids']}" />
								</map>
							</property>
						</bean>
					</batch:reader>
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<batch:job id="testBatchJob">
		<batch:step id="testBatchStep">
			<batch:tasklet>
				<batch:chunk reader="testReader" processor="testProcessor"
					writer="testWriter" commit-interval="10"></batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>
</beans>
